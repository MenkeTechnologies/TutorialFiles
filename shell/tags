!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLUE	blueText.sh	/^BLUE='\\e[37;44m'$/;"	v
BLUE	blueUpperText.sh	/^BLUE='\\e[37;44m'$/;"	v
BLUE	boldText.sh	/^BLUE='\\e[37;44m'$/;"	v
BLUE	coolFormatter.sh	/^BLUE='\\e[37;44m'$/;"	v
CAROLYN	.tokens.sh	/^		CAROLYN="9046991975"$/;"	v
CMD	myWatchNoBlink.sh	/^        CMD="$@"$/;"	v
CMD	myWatchNoBlinkColorized.sh	/^        CMD="$@"$/;"	v
COLS	myWatchNoBlink.sh	/^        COLS=$(tput cols)$/;"	v
COLS	myWatchNoBlinkColorized.sh	/^        COLS=$(tput cols)$/;"	v
COWSAY_DIR	macOnly/randomCow.sh	/^COWSAY_DIR=\/usr\/local\/lib\/node_modules\/cowsay\/cows$/;"	v
CR	batchRename.sh	/^    local CR="\\r"$/;"	v
CR	openAll.sh	/^local CR="\\r"$/;"	v
DAD	.tokens.sh	/^		DAD="9046352769"$/;"	v
DIR	macOnly/rsyncr.sh	/^localDIR="$1"$/;"	v
DIR	rsyncr.sh	/^localDIR="$1"$/;"	v
DIR_WATCHING	fsWatchLongRunning.sh	/^DIR_WATCHING="$1"$/;"	v
DIR_WATCHING	watchServiceFSWatchGit.sh	/^DIR_WATCHING="$1"$/;"	v
DIR_WATCHING	watchServiceFSWatchLS-ALH.sh	/^DIR_WATCHING="$1"$/;"	v
DIR_WATCHING	watchServiceFSWatchPiDesktop.sh	/^DIR_WATCHING="$1"$/;"	v
DIR_WATCHING	watchServiceFSWatchPiWeb.sh	/^DIR_WATCHING="$1"$/;"	v
DIR_WATCHING	watchServiceFSWatchRustCompile.sh	/^DIR_WATCHING="$1"$/;"	v
ECHO	oldCounter.sh	/^                        ECHO="true"$/;"	v
ED	myWatchNoBlink.sh	/^    ED=$(tput ed)$/;"	v
ED	myWatchNoBlinkColorized.sh	/^    ED=$(tput ed)$/;"	v
EL	myWatchNoBlink.sh	/^    EL=$(tput el)$/;"	v
EL	myWatchNoBlinkColorized.sh	/^    EL=$(tput el)$/;"	v
FAMILY_NUMBERS	.tokens.sh	/^		FAMILY_NUMBERS=($DAD $JOSH $JESSICA $CAROLYN)$/;"	v
FIGLET_DIR	figletRandomFont.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FIGLET_DIR	figletRandomFontOnce.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FIGLET_DIR	macOnly/figletRandomFont.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FIGLET_DIR	macOnly/figletRandomFontOnce.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FIGLET_DIR	macOnly/figletRotater.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FIGLET_DIR	macOnly/menkeTechRandomFont.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FIGLET_DIR	menkeTechRandoFont.sh	/^FIGLET_DIR=\/usr\/local\/Cellar\/figlet\/2.2.5\/share\/figlet\/fonts$/;"	v
FILTER	figletRandomFont.sh	/^FILTER="$2"$/;"	v
FILTER	figletRandomFontOnce.sh	/^FILTER="$2"$/;"	v
FILTER	macOnly/figletRandomFont.sh	/^FILTER="$2"$/;"	v
FILTER	macOnly/figletRandomFontOnce.sh	/^FILTER="$2"$/;"	v
FILTER	macOnly/figletRotater.sh	/^FILTER="$2"$/;"	v
FILTER	macOnly/menkeTechRandomFont.sh	/^FILTER="$1"$/;"	v
FILTER	macOnly/randomCow.sh	/^FILTER="$2"$/;"	v
FILTER	menkeTechRandoFont.sh	/^FILTER="$1"$/;"	v
GRC_DIR	customTerminalInstaller/install.sh	/^    GRC_DIR=\/usr\/local\/share\/grc$/;"	v
GRC_DIR	customTerminalInstaller/install.sh	/^    GRC_DIR=\/usr\/share\/grc$/;"	v
HOME	myWatchNoBlink.sh	/^    HOME=$(tput cup 0 0)$/;"	v
HOME	myWatchNoBlinkColorized.sh	/^    HOME=$(tput cup 0 0)$/;"	v
IFS	listAllCommands.sh	/^IFS=:$/;"	v
IFS	sortedArrayCounter.sh	/^        IFS="$OLDIFS"$/;"	v
IFS	sortedArrayCounter.sh	/^IFS=$'\\n'$/;"	v
IFS	sortedArrayCounter.sh	/^IFS=:$/;"	v
INSTALLER_DIR	customTerminalInstaller/install.sh	/^INSTALLER_DIR="$(pwd -P)"$/;"	v
INSTALLER_DIR	customTerminalInstaller/tmux_plugins_install.sh	/^INSTALLER_DIR="$(pwd)"$/;"	v
INSTALLER_DIR	customTerminalInstaller/vim_plugins_install.sh	/^INSTALLER_DIR="$(pwd)"$/;"	v
INTERFACE	macOnly/tor.sh	/^INTERFACE=Wi-Fi$/;"	v
JACOB	.tokens.sh	/^		JACOB="9047039159"$/;"	v
JESSICA	.tokens.sh	/^		JESSICA="9046992045"$/;"	v
JOSH	.tokens.sh	/^		JOSH="9046351659"$/;"	v
LOGFILE	updaterEmail.sh	/^LOGFILE=\/Users\/jacobmenke\/updaterlog.txt$/;"	v
OLDIFS	sortedArrayCounter.sh	/^OLDIFS="$IFS"$/;"	v
ORGIN_NAME	gitgo.sh	/^    local ORGIN_NAME="$(git remote -v | awk '{print $1}' | tail -1 | tr -d ' ')"$/;"	v
OS_TYPE	customTerminalInstaller/install.sh	/^OS_TYPE="$(uname -s)"$/;"	v
PULL_URL	gitgo.sh	/^        local PULL_URL="$(git remote -v | \\$/;"	v
RED	redText.sh	/^RED='\\e[31;1m'$/;"	v
REPO	customTerminalInstaller/.shell_aliases_functions.sh	/^        REPO="$1"$/;"	v
REPO	macOnly/.shell_aliases_functions.sh	/^    REPO="$1"$/;"	v
REPO_NAME	gitgo.sh	/^        local REPO_NAME="$(git remote -v | awk '{print $2}' | tail -1 | tr -d ' ')"$/;"	v
REPO_NAME_TO_CREATE	gitgo.sh	/^        local REPO_NAME_TO_CREATE="$1"$/;"	v
RESET	blueText.sh	/^RESET='\\e[0m'$/;"	v
RESET	blueUpperText.sh	/^RESET='\\e[0m'$/;"	v
RESET	boldText.sh	/^RESET='\\e[0m'$/;"	v
RESET	coolFormatter.sh	/^RESET='\\e[0m'$/;"	v
RESET	redText.sh	/^RESET='\\e[0m'$/;"	v
ROWS	myWatchNoBlink.sh	/^        ROWS=$(tput lines)$/;"	v
ROWS	myWatchNoBlinkColorized.sh	/^        ROWS=$(tput lines)$/;"	v
SCRIPTS	macOnly/tutorialConfigUpdater.sh	/^SCRIPTS="$HOME\/Documents\/shellScripts"$/;"	v
SCRIPTS	printHeader.sh	/^    SCRIPTS="$HOME\/Documents\/shellScripts"$/;"	v
SCRIPTS	updaterEmail.sh	/^SCRIPTS=\/Users\/jacobmenke\/Documents\/shellScripts$/;"	v
SCRIPT_TO_RUN	watchServiceFSWatchPiDesktop.sh	/^SCRIPT_TO_RUN=$SCRIPTS\/upLoadPi.sh$/;"	v
SCRIPT_TO_RUN	watchServiceFSWatchPiWeb.sh	/^SCRIPT_TO_RUN=$SCRIPTS\/uploadWebPi.sh$/;"	v
TEXT_TO_DISPLAY	figletRandomFont.sh	/^TEXT_TO_DISPLAY="$1"$/;"	v
TEXT_TO_DISPLAY	figletRandomFontOnce.sh	/^TEXT_TO_DISPLAY="$1"$/;"	v
TEXT_TO_DISPLAY	macOnly/figletRandomFont.sh	/^TEXT_TO_DISPLAY="$1"$/;"	v
TEXT_TO_DISPLAY	macOnly/figletRandomFontOnce.sh	/^TEXT_TO_DISPLAY="$1"$/;"	v
TEXT_TO_DISPLAY	macOnly/figletRotater.sh	/^TEXT_TO_DISPLAY="$1"$/;"	v
TEXT_TO_DISPLAY	macOnly/menkeTechRandomFont.sh	/^TEXT_TO_DISPLAY="Menke Technologies"$/;"	v
TEXT_TO_DISPLAY	macOnly/randomCow.sh	/^TEXT_TO_DISPLAY="$1"$/;"	v
TEXT_TO_DISPLAY	menkeTechRandoFont.sh	/^TEXT_TO_DISPLAY="Menke Technologies"$/;"	v
TIME	mywatch.sh	/^    TIME="$2"$/;"	v
TIME	mywatch.sh	/^    TIME=1$/;"	v
URL	gitgo.sh	/^    local URL="https:\/\/github.com\/$GITHUB_ACCOUNT\/$REPO_NAME_TO_CREATE"$/;"	v
__ScriptVersion	macOnly/splitReg.sh	/^__ScriptVersion=1.0.0$/;"	v
__ScriptVersion	macOnly/splitStdoutByRegex.sh	/^__ScriptVersion=1.0.0$/;"	v
addContents	shebangChanger.sh	/^addContents(){$/;"	f
addHeader	createTextFile.sh	/^addHeader(){$/;"	f
addHeader	templater.sh	/^addHeader(){$/;"	f
address	uploadWebDS.sh	/^address="jacobmenke@$MY_IP:\/var\/services\/web"$/;"	v
address	uploadWebPi.sh	/^address="pi@$MY_IP:\/var\/www\/html"$/;"	v
animate	customTerminalInstaller/.shell_aliases_functions.sh	/^animate(){$/;"	f
animate	macOnly/.shell_aliases_functions.sh	/^animate(){$/;"	f
arr	listAllCommands.sh	/^arr=()$/;"	v
arr	picture_finder.sh	/^local arr=(  '|' '\\' '-' '\/' )$/;"	v
arr	secureDelete.sh	/^    local arr=(  '|' '\\' '-' '\/' )$/;"	v
arr	sortedArrayCounter.sh	/^arr=()$/;"	v
arrayOfPI	updater.sh	/^arrayOfPI=(r r2)$/;"	v
backup	macOnly/.shell_aliases_functions.sh	/^backup(){$/;"	f
backup_dir	duplicateLineDeleter.sh	/^backup_dir=$scripts_dir\/rcBackups$/;"	v
backup_dir	indenterAndDuplicateLineDeleter.sh	/^backup_dir=$scripts_dir\/rcBackups$/;"	v
blocksToSize	customTerminalInstaller/.shell_aliases_functions.sh	/^blocksToSize(){$/;"	f
blocksToSize	macOnly/.shell_aliases_functions.sh	/^blocksToSize(){$/;"	f
blocksize	secureDelete.sh	/^blocksize=1      #  I\/O with \/dev\/urandom requires unit block size,$/;"	v
bold	customTerminalInstaller/.shell_aliases_functions.sh	/^bold=$(tput bold || tput md)$/;"	v
bold	macOnly/.shell_aliases_functions.sh	/^	bold=$(tput bold || tput md)$/;"	v
boldAndUnderlinedPrint	macOnly/tutorialConfigUpdater.sh	/^boldAndUnderlinedPrint(){$/;"	f
bytes	customTerminalInstaller/.shell_aliases_functions.sh	/^    local bytes=$(( input * 512 ))$/;"	v
bytes	macOnly/.shell_aliases_functions.sh	/^    local bytes=$(( input * 512 ))$/;"	v
cd	customTerminalInstaller/.shell_aliases_functions.sh	/^    cd(){$/;"	f
cd	macOnly/.shell_aliases_functions.sh	/^cd(){$/;"	f
chars	batchRename.sh	/^    local chars=1 # number of characters to display$/;"	v
chars	openAll.sh	/^local chars=1 # number of characters to display$/;"	v
checkForExistence	batchRename.sh	/^checkForExistence(){$/;"	f
clearList	customTerminalInstaller/.shell_aliases_functions.sh	/^clearList () {$/;"	f
clearList	macOnly/.shell_aliases_functions.sh	/^clearList () {$/;"	f
clearline	batchRename.sh	/^    local clearline="\\e[K" # clear to end of line (ANSI terminal)$/;"	v
clearline	openAll.sh	/^local clearline="\\e[K" # clear to end of line (ANSI terminal)$/;"	v
color2	customTerminalInstaller/.shell_aliases_functions.sh	/^    color2(){$/;"	f
color2	macOnly/.shell_aliases_functions.sh	/^color2(){$/;"	f
cols	animation	/^cols=`tput cols`$/;"	v
cols	picture_finder.sh	/^cols=`tput cols`$/;"	v
command	runner.sh	/^        command="vim -i NONE -V1 -Nes -c 'so""$fileToBeExecuted""' -c'echo""|q!' 2>&1 | tail +4"$/;"	v
commandList	oldCounter.sh	/^		commandList="$i\\n$commandList"$/;"	v
commandList	oldCounter.sh	/^commandList=""$/;"	v
commands	oldCounter.sh	/^		commands="$f $commands"$/;"	v
commands	oldCounter.sh	/^commands=""$/;"	v
commitMessage	gitgo.sh	/^    local commitMessage="$1"$/;"	v
commitMessage	macOnly/tutorialConfigUpdater.sh	/^    commitMessage="$1"$/;"	v
commitMessage	macOnly/tutorialConfigUpdater.sh	/^    commitMessage="update"$/;"	v
commitTheDirectory	gitgo.sh	/^commitTheDirectory(){$/;"	f
compiled	watchServiceFSWatchRustCompile.sh	/^			compiled=${fileName%*.rs}$/;"	v
concat	myWatchNoBlinkColorized.sh	/^	    	concat="$(java parser $LINE)"$/;"	v
contents	duplicateLineDeleter.sh	/^	contents=$(cat -s "$file")$/;"	v
contents	indenterAndDuplicateLineDeleter.sh	/^    contents=$(cat -s "$file")$/;"	v
convertFiles	batchRename.sh	/^convertFiles(){$/;"	f
count	animation	/^count=$topline$/;"	v
counter	filenameLengthCounters.sh	/^counter=0$/;"	v
createGIF	customTerminalInstaller/.shell_aliases_functions.sh	/^    createGIF(){$/;"	f
createGIF	macOnly/.shell_aliases_functions.sh	/^createGIF(){$/;"	f
createTemplate	templater.sh	/^createTemplate(){$/;"	f
createTheFile	createScriptButDontOpenSublime.sh	/^createTheFile(){$/;"	f
createTheFile	createTextFile.sh	/^createTheFile(){$/;"	f
db	customTerminalInstaller/.shell_aliases_functions.sh	/^db(){$/;"	f
db	macOnly/.shell_aliases_functions.sh	/^db(){$/;"	f
default_recipent	textmessage.sh	/^    default_recipent=555111333$/;"	v
delay	batchRename.sh	/^    local delay=.1 # time in seconds between characters$/;"	v
delay	openAll.sh	/^local delay=.1 # time in seconds between characters$/;"	v
delim	batchRename.sh	/^delim=_$/;"	v
delim	macOnly/splitReg.sh	/^delim=$(echo "$output" | grep -n -- "$regex" | tail -$level | head -1 | cut -d: -f1)$/;"	v
delim	macOnly/splitStdOut.sh	/^delim=$(echo "$output" | grep -n -- "$regex" | cut -d: -f1)$/;"	v
delim	macOnly/splitStdoutByRegex.sh	/^delim=$(echo "$output" | grep -n -- "$regex" | cut -d: -f1)$/;"	v
dependencies_ary	customTerminalInstaller/install.sh	/^dependencies_ary=(vim tmux git wget lolcat cowsay cmatrix htop cmake glances bpython python-dev \\$/;"	v
destinationFile	picture_finder.sh	/^	destinationFile=$destinationDirectory\/${picture##*\/}$/;"	v
dir	macOnly/.shell_aliases_functions.sh	/^dir="$1"$/;"	v
dir	oldCounter.sh	/^	dir=`echo $PATH | cut -d: -f$i`$/;"	v
dirNum	oldCounter.sh	/^dirNum=`expr $(echo $PATH | tr -cd : | wc -c) + 1`$/;"	v
dir_name	macOnly/.shell_aliases_functions.sh	/^    dir_name=${git_name%.*}$/;"	v
dir_to_search	openAll.sh	/^	dir_to_search="$2"$/;"	v
dir_to_search	openAll.sh	/^dir_to_search="$(pwd)"$/;"	v
directory_name	tgzLocalInstaller.sh	/^        directory_name="${tarbellDirectory%.tar.gz}"$/;"	v
directory_name	tgzLocalInstaller.sh	/^        directory_name="${tarbellDirectory%.tgz}"$/;"	v
disable_proxy	macOnly/tor.sh	/^function disable_proxy() {$/;"	f
disable_proxy	tor.sh	/^function disable_proxy() {$/;"	f
displayProgress	batchRename.sh	/^displayProgress(){$/;"	f
displayProgress	picture_finder.sh	/^displayProgress(){$/;"	f
displayProgress	secureDelete.sh	/^displayProgress(){$/;"	f
displayProgressIndicator	openAll.sh	/^displayProgressIndicator(){$/;"	f
distroName	clearTrash.sh	/^    distroName=$(lsb_release -a | head -1 | awk '{print $3}')$/;"	v
distroName	colorLogger.sh	/^    distroName=$(lsb_release -a | head -1 | awk '{print $3}')$/;"	v
distroName	customTerminalInstaller/install.sh	/^    distroName=$(lsb_release -a | head -1 | awk '{print $3}')$/;"	v
distroName	macOnly/.shell_aliases_functions.sh	/^    distroName=$(lsb_release -a | head -1 | awk '{print $3}')$/;"	v
dontSummarizeSizes	directoryContentsSize.sh	/^dontSummarizeSizes(){$/;"	f
e_badargs	secureDelete.sh	/^e_badargs=70     #  Various error exit codes.$/;"	v
e_changed_mind	secureDelete.sh	/^e_changed_mind=72$/;"	v
e_not_found	secureDelete.sh	/^e_not_found=71$/;"	v
enclosing_dir	rpiSoftwareUpdater.sh	/^    enclosing_dir="$1"$/;"	v
enclosing_dir	updater.sh	/^    enclosing_dir="$1"$/;"	v
encrypt_program	encrypt.sh	/^    encrypt_program=zip$/;"	v
encrypt_program	encrypt.sh	/^encrypt_program=ccrypt$/;"	v
encrypt_program	encryptstuff.sh	/^encrypt_program=ccrypt$/;"	v
ending	picture_finder.sh	/^	ending=${destinationFile##*.}$/;"	v
escapeRemove	customTerminalInstaller/.shell_aliases_functions.sh	/^    escapeRemove(){$/;"	f
escapeRemove	macOnly/.shell_aliases_functions.sh	/^escapeRemove(){$/;"	f
execpy	customTerminalInstaller/.shell_aliases_functions.sh	/^    execpy(){$/;"	f
execpy	macOnly/.shell_aliases_functions.sh	/^execpy(){$/;"	f
executableProgram	shebangChanger.sh	/^executableProgram=$1$/;"	v
executableScriptsProcessing	createScriptButDontOpenSublime.sh	/^executableScriptsProcessing(){$/;"	f
executableScriptsProcessing	createTextFile.sh	/^executableScriptsProcessing(){$/;"	f
executableScriptsProcessing	runner.sh	/^executableScriptsProcessing(){$/;"	f
executableScriptsProcessing	templater.sh	/^executableScriptsProcessing(){$/;"	f
executeFileFirstArgIsCommand	runner.sh	/^executeFileFirstArgIsCommand(){$/;"	f
executeTheFile	runner.sh	/^executeTheFile(){$/;"	f
exists	customTerminalInstaller/install.sh	/^exists(){$/;"	f
exists	macOnly/.shell_aliases_functions.sh	/^exists(){$/;"	f
exists	updater.sh	/^exists(){$/;"	f
f	customTerminalInstaller/.shell_aliases_functions.sh	/^    f(){$/;"	f
f	macOnly/.shell_aliases_functions.sh	/^f(){$/;"	f
family_phone_numbers	textmessage.sh	/^    family_phone_numbers=($member_1)$/;"	v
file	inotifyWatchLogAndEmailIfNAS.sh	/^file="$1"$/;"	v
file	macOnly/splitReg.sh	/^file=\/tmp\/temp$\$$/;"	v
file	macOnly/splitStdOut.sh	/^file=\/tmp\/temp$\$$/;"	v
file	macOnly/splitStdoutByRegex.sh	/^file=\/tmp\/temp$\$$/;"	v
file	openAll.sh	/^	file="$(echo $file | tr '[:upper:]' '[:lower:]')"$/;"	v
file	secureDelete.sh	/^    file="$i"$/;"	v
file	watchLogAndEmailIfNAS.sh	/^file="$1"$/;"	v
fileName	watchServiceFSWatchRustCompile.sh	/^	fileName=`basename $event`$/;"	v
fileString	openAll.sh	/^fileString=""$/;"	v
fileToBeExecuted	runner.sh	/^fileToBeExecuted="$1"$/;"	v
fileToBeExecuted	templater.sh	/^fileToBeExecuted="$1"$/;"	v
file_name	filenameLengthCounters.sh	/^        file_name="$(basename "$file")"$/;"	v
files	backupBashConfig.sh	/^files=("$my_home_dir\/.bashrc" "$my_home_dir\/.bash_profile" "$my_home_dir\/.profile" '\/etc\/bashrc' '\/etc\/profile')$/;"	v
filesArray	openAll.sh	/^filesArray=()$/;"	v
filter	macOnly/splitReg.sh	/^filter="$2"$/;"	v
filter	macOnly/splitStdoutByRegex.sh	/^filter="$2"$/;"	v
findTotal	oldCounter.sh	/^findTotal (){$/;"	f
first	batchRename.sh	/^        local first=`echo ${file%%$delim*}`$/;"	v
firstFile	sync.sh	/^    firstFile="${firstFile}\/"$/;"	v
firstFile	sync.sh	/^firstFile="$1"$/;"	v
firstString	createTextFile.sh	/^    firstString=$(cat<<EOM$/;"	v
first_iteration	fsWatchLongRunning.sh	/^        first_iteration=false$/;"	v
first_iteration	fsWatchLongRunning.sh	/^first_iteration=true$/;"	v
flength	secureDelete.sh	/^    flength=$(ls -l "$file" | awk '{print $5}')  # Field 5 is file length.$/;"	v
font	figletRandomFont.sh	/^    font=${ary[$randIndex]}$/;"	v
font	figletRandomFontOnce.sh	/^font=${ary[$randIndex]}$/;"	v
font	macOnly/figletRandomFont.sh	/^    font=${ary[$randIndex]}$/;"	v
font	macOnly/figletRandomFontOnce.sh	/^font=${ary[$randIndex]}$/;"	v
font	macOnly/menkeTechRandomFont.sh	/^    font=${ary[$randIndex]}$/;"	v
font	macOnly/randomCow.sh	/^font=${ary[$randIndex]}$/;"	v
font	menkeTechRandoFont.sh	/^    font=${ary[$randIndex]}$/;"	v
fortuneQuote	eyes.sh	/^        fortuneQuote="$(figlet -f $1 \\"$fortuneQuote\\")"$/;"	v
fortuneQuote	eyes.sh	/^    fortuneQuote="$(fortune)"$/;"	v
found	shebangChanger.sh	/^            found=false$/;"	v
found	shebangChanger.sh	/^            found=true$/;"	v
found	shebangChanger.sh	/^    found=false$/;"	v
gcl	macOnly/.shell_aliases_functions.sh	/^gcl() {$/;"	f
getInitialCommit	gitgo.sh	/^getInitialCommit(){$/;"	f
getRemoteDetails	gitgo.sh	/^getRemoteDetails(){$/;"	f
getrc	macOnly/.shell_aliases_functions.sh	/^getrc(){$/;"	f
gitCommitAndPush	customTerminalInstaller/.shell_aliases_functions.sh	/^    gitCommitAndPush(){$/;"	f
gitCommitAndPush	macOnly/.shell_aliases_functions.sh	/^gitCommitAndPush(){$/;"	f
gitPull	gitgo.sh	/^gitPull(){$/;"	f
gitPush	gitgo.sh	/^gitPush(){$/;"	f
gitRepoUpdater	rpiSoftwareUpdater.sh	/^gitRepoUpdater(){$/;"	f
gitRepoUpdater	updater.sh	/^gitRepoUpdater(){$/;"	f
git_name	macOnly/.shell_aliases_functions.sh	/^    git_name="${1##*\/}"$/;"	v
headerSTRING	templater.sh	/^    headerSTRING=$(cat<<EOM$/;"	v
home_dir	duplicateLineDeleter.sh	/^home_dir=$HOME$/;"	v
home_dir	indenterAndDuplicateLineDeleter.sh	/^home_dir=$HOME$/;"	v
host	macOnly/rsyncr.sh	/^host="r"$/;"	v
host	rsyncr.sh	/^host="r"$/;"	v
htopDIR	customTerminalInstaller/install.sh	/^htopDIR="$HOME\/.config\/htop"$/;"	v
hub_create	customTerminalInstaller/.shell_aliases_functions.sh	/^    hub_create(){$/;"	f
hub_create	macOnly/.shell_aliases_functions.sh	/^hub_create(){$/;"	f
hub_delete	customTerminalInstaller/.shell_aliases_functions.sh	/^    hub_delete(){$/;"	f
hub_delete	macOnly/.shell_aliases_functions.sh	/^hub_delete(){$/;"	f
humanReadable	customTerminalInstaller/.shell_aliases_functions.sh	/^humanReadable(){$/;"	f
humanReadable	macOnly/.shell_aliases_functions.sh	/^humanReadable(){$/;"	f
initializeGitDirectory	gitgo.sh	/^initializeGitDirectory(){$/;"	f
install	tgzLocalInstaller.sh	/^install(){$/;"	f
installGitHubPlugin	customTerminalInstaller/tmux_plugins_install.sh	/^installGitHubPlugin(){$/;"	f
installOhMyZshPlugin	customTerminalInstaller/zsh.sh	/^installOhMyZshPlugin(){$/;"	f
installOhMyZshPlugin	customTerminalInstaller/zsh_plugins_install.sh	/^installOhMyZshPlugin(){$/;"	f
installVimPlugin	customTerminalInstaller/vim_plugins_install.sh	/^installVimPlugin(){$/;"	f
installerDir	macOnly/tutorialConfigUpdater.sh	/^installerDir="$HOME\/Documents\/shellScripts\/customTerminalInstaller"$/;"	v
killCursor	batchRename.sh	/^killCursor(){$/;"	f
killCursor	openAll.sh	/^killCursor(){$/;"	f
killCursor	picture_finder.sh	/^killCursor(){$/;"	f
killCursor	secureDelete.sh	/^killCursor(){$/;"	f
last	batchRename.sh	/^        local last=`echo ${file##*_}`$/;"	v
last_fields	macOnly/.shell_aliases_functions.sh	/^                last_fields="$(echo $locale | cut -d' ' -f3-10)"$/;"	v
lcline	openAll.sh	/^	lcline="$(echo $line | tr '[:upper:]' '[:lower:]')"$/;"	v
length	filenameLengthCounters.sh	/^        length="$(echo $file_name | wc -c | tr -d ' ')"$/;"	v
level	macOnly/splitReg.sh	/^level=1$/;"	v
lib_command	macOnly/.shell_aliases_functions.sh	/^lib_command="ldd -v"$/;"	v
lib_command	macOnly/.shell_aliases_functions.sh	/^lib_command="otool -L"$/;"	v
line	gitRemoteRepoInformation.sh	/^        line="$(git remote -v 2>\/dev\/null)"$/;"	v
lineCounter	shebangChanger.sh	/^    lineCounter=1$/;"	v
listNoClear	macOnly/.shell_aliases_functions.sh	/^listNoClear () {$/;"	f
ls_command	macOnly/.shell_aliases_functions.sh	/^        ls_command="grc -c \/usr\/local\/share\/grc\/conf.gls gls -iFlhA --color=always"$/;"	v
ls_command	macOnly/.shell_aliases_functions.sh	/^        ls_command="grc -c \/usr\/share\/grc\/conf.gls ls -iFlhA --color=always"$/;"	v
ls_command	macOnly/.shell_aliases_functions.sh	/^    ls_command="ls -iFhlA"$/;"	v
ls_command	macOnly/.shell_aliases_functions.sh	/^    ls_command="ls -iFlhAO"$/;"	v
master	dsDownloader.sh	/^master="jacobmenke"$/;"	v
master	rpiDownloader.sh	/^master="jacobmenke"$/;"	v
member_1	textmessage.sh	/^    member_1=5551113333$/;"	v
messageToSpeak	macOnly/say.sh	/^messageToSpeak=""$/;"	v
messageToSpeak	say.sh	/^messageToSpeak=""$/;"	v
mp3	customTerminalInstaller/.shell_aliases_functions.sh	/^    mp3(){$/;"	f
mp3	macOnly/.shell_aliases_functions.sh	/^mp3(){$/;"	f
mp4	customTerminalInstaller/.shell_aliases_functions.sh	/^    mp4(){$/;"	f
mp4	macOnly/.shell_aliases_functions.sh	/^mp4(){$/;"	f
msg	customTerminalInstaller/.shell_aliases_functions.sh	/^    msg="$2"$/;"	v
msg	macOnly/.shell_aliases_functions.sh	/^    msg="$2"$/;"	v
myPrettyPrint	gitgo.sh	/^myPrettyPrint(){$/;"	f
my_backup_dir	backupBashConfig.sh	/^my_backup_dir="$my_scripts_dir\/rcBackups"$/;"	v
my_home_dir	backupBashConfig.sh	/^my_home_dir=$HOME$/;"	v
my_scripts_dir	backupBashConfig.sh	/^my_scripts_dir="$SCRIPTS"$/;"	v
newfile	batchRename.sh	/^        local newfile=$first$number.$endFileEnding$/;"	v
newfile	createScriptButDontOpenSublime.sh	/^	newfile="$newfile".txt$/;"	v
newfile	createScriptButDontOpenSublime.sh	/^newfile="$1"$/;"	v
newfile	createTextFile.sh	/^    newfile="$newfile".txt$/;"	v
newfile	createTextFile.sh	/^newfile="$1"$/;"	v
newfile	macOnly/.shell_aliases_functions.sh	/^    newfile="$1".$(date +%Y%m%d.%H.%M.bak)$/;"	v
nn	customTerminalInstaller/.shell_aliases_functions.sh	/^nn(){$/;"	f
nn	macOnly/.shell_aliases_functions.sh	/^nn(){$/;"	f
number	batchRename.sh	/^        local number=$((10#$number))$/;"	v
number	batchRename.sh	/^        local number=`echo ${last%%.*}`$/;"	v
o	macOnly/combo.sh	/^o="$(cat)"$/;"	v
openTextEditor	createScriptButDontOpenSublime.sh	/^openTextEditor(){$/;"	f
openTextEditor	createTextFile.sh	/^openTextEditor(){$/;"	f
optstring	directoryContentsSize.sh	/^optstring=shta$/;"	v
optstring	gitgo.sh	/^optstring=p:hcl$/;"	v
optstring	myWatchNoBlink.sh	/^optstring=bh$/;"	v
optstring	myWatchNoBlinkColorized.sh	/^optstring=bh$/;"	v
optstring	mywatch.sh	/^optstring=dh$/;"	v
orig	customTerminalInstaller/.shell_aliases_functions.sh	/^        orig="$1"$/;"	v
orig	macOnly/.shell_aliases_functions.sh	/^    orig="$1"$/;"	v
origin	gitgo.sh	/^    local origin="$(git remote -v | awk '{print $1}' | tail -1 | tr -d ' ')"$/;"	v
out	customTerminalInstaller/.shell_aliases_functions.sh	/^        out="$(curl -u menketechnologies -X "DELETE" https:\/\/api.github.com\/repos\/menketechnologies\/"$REPO")"$/;"	v
out	inotifyWatchLogAndEmailIfNAS.sh	/^    out=$(tail -1 "$file" | grep "nas")$/;"	v
out	macOnly/.shell_aliases_functions.sh	/^    out="$(curl -u menketechnologies -X "DELETE" https:\/\/api.github.com\/repos\/menketechnologies\/"$REPO")"$/;"	v
out	watchLogAndEmailIfNAS.sh	/^    out=$(tail -5 "$file" | grep "nas")$/;"	v
outFile	customTerminalInstaller/.shell_aliases_functions.sh	/^            outFile="$3"	$/;"	v
outFile	customTerminalInstaller/.shell_aliases_functions.sh	/^        outFile=out.gif$/;"	v
outFile	macOnly/.shell_aliases_functions.sh	/^    outFile=out.gif$/;"	v
outdated	updater.sh	/^    outdated=$(pip2 list --outdated | awk '{print $1}')$/;"	v
outdated	updater.sh	/^    outdated=$(pip3 list --outdated | awk '{print $1}')$/;"	v
output	figletRandomFont.sh	/^    output="$(echo $TEXT_TO_DISPLAY | figlet -f $font)"$/;"	v
output	figletRandomFontOnce.sh	/^output="$(echo $TEXT_TO_DISPLAY | figlet -f $font)"$/;"	v
output	macOnly/figletRandomFont.sh	/^    output="$(echo $TEXT_TO_DISPLAY | figlet -f $font)"$/;"	v
output	macOnly/figletRandomFontOnce.sh	/^    output="$(echo $TEXT_TO_DISPLAY | figlet -f $font)"$/;"	v
output	macOnly/menkeTechRandomFont.sh	/^    output="$(echo $TEXT_TO_DISPLAY | figlet -f $font)"$/;"	v
output	macOnly/randomCow.sh	/^    output="$(echo $TEXT_TO_DISPLAY | cowsay -f $font)"$/;"	v
output	macOnly/splitReg.sh	/^output=`cat \/tmp\/temp$$` $/;"	v
output	macOnly/splitStdOut.sh	/^output=`cat \/tmp\/temp$$` $/;"	v
output	macOnly/splitStdoutByRegex.sh	/^output=`cat \/tmp\/temp$$` $/;"	v
output	menkeTechRandoFont.sh	/^    output="$(echo $TEXT_TO_DISPLAY | figlet -f $font)"$/;"	v
output	watchServiceFSWatchRustCompile.sh	/^		output="$(rustc $2 2>&1)"$/;"	v
outputDir	dsDownloader.sh	/^outputDir="Desktop"$/;"	v
outputDir	rpiDownloader.sh	/^outputDir="Desktop"$/;"	v
pass_count	secureDelete.sh	/^    pass_count=1$/;"	v
passes	secureDelete.sh	/^passes=7         #  Number of file-shredding passes.$/;"	v
path	shebangChanger.sh	/^path="#!\/usr\/bin\/env $executableProgram"$/;"	v
perlOutdated	updater.sh	/^    perlOutdated=$(cpan-outdated -p -L "$PERL5LIB")$/;"	v
pid	fsWatchLongRunning.sh	/^            pid=$!$/;"	v
pid	fsWatchLongRunning.sh	/^        pid=$!$/;"	v
pion	macOnly/.shell_aliases_functions.sh	/^pion (){$/;"	f
pipe	readFIFO.sh	/^pipe=$HOME\/Desktop\/testpipe$/;"	v
pipe	readFIFO.sh	/^pipe=\/tmp\/testpipe$/;"	v
prettyPrint	customTerminalInstaller/.shell_aliases_functions.sh	/^    prettyPrint(){$/;"	f
prettyPrint	macOnly/.shell_aliases_functions.sh	/^prettyPrint(){$/;"	f
prettyPrint	macOnly/tor.sh	/^prettyPrint (){$/;"	f
prettyPrint	rpiSoftwareUpdater.sh	/^prettyPrint(){$/;"	f
prettyPrint	textmessage.sh	/^prettyPrint () {$/;"	f
prettyPrint	tor.sh	/^prettyPrint (){$/;"	f
prettyPrint	updater.sh	/^prettyPrint(){$/;"	f
printD	banner.pl	/^sub printD{$/;"	s
printDate	banner.pl	/^sub printDate{$/;"	s
progress_pid	batchRename.sh	/^    progress_pid=$!$/;"	v
progress_pid	openAll.sh	/^	progress_pid=$!$/;"	v
progress_pid	picture_finder.sh	/^  progress_pid=$!$/;"	v
progress_pid	secureDelete.sh	/^    progress_pid=$!$/;"	v
prompt	batchRename.sh	/^    local prompt="press any key..." # user prompt$/;"	v
prompt	openAll.sh	/^local prompt="press any key..." # user prompt$/;"	v
pstreeMonitor	customTerminalInstaller/.shell_aliases_functions.sh	/^    pstreeMonitor(){$/;"	f
pstreeMonitor	macOnly/.shell_aliases_functions.sh	/^pstreeMonitor(){$/;"	f
purpose	headerSummarizer.sh	/^    purpose="$(sed -n 6p $file)"$/;"	v
randIndex	eyes.sh	/^    randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	figletRandomFont.sh	/^    randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	figletRandomFontOnce.sh	/^randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	macOnly/figletRandomFont.sh	/^    randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	macOnly/figletRandomFontOnce.sh	/^randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	macOnly/menkeTechRandomFont.sh	/^    randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	macOnly/randomCow.sh	/^randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randIndex	menkeTechRandoFont.sh	/^    randIndex=$(($RANDOM % $rangePossibleIndices))$/;"	v
randomCowsayCowScript	macOnly/combo.sh	/^randomCowsayCowScript="$SCRIPTS\/macOnly\/randomCow.sh" $/;"	v
randomFigletFontScript	macOnly/combo.sh	/^randomFigletFontScript="$SCRIPTS\/macOnly\/figletRandomFontOnce.sh"$/;"	v
rangePossibleIndices	eyes.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	figletRandomFont.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	figletRandomFontOnce.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	macOnly/figletRandomFont.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	macOnly/figletRandomFontOnce.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	macOnly/menkeTechRandomFont.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	macOnly/randomCow.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
rangePossibleIndices	menkeTechRandoFont.sh	/^rangePossibleIndices=${#ary[*]}$/;"	v
red	customTerminalInstaller/.shell_aliases_functions.sh	/^red=$(tput setaf 1)$/;"	v
red	macOnly/.shell_aliases_functions.sh	/^	red=$(tput setaf 1)$/;"	v
regex	macOnly/splitReg.sh	/^regex="$1"$/;"	v
regex	macOnly/splitStdOut.sh	/^regex="$1"$/;"	v
regex	macOnly/splitStdoutByRegex.sh	/^regex="$1"$/;"	v
remoteDIR	macOnly/rsyncr.sh	/^remoteDIR="$2"$/;"	v
remoteDIR	rsyncr.sh	/^remoteDIR="$2"$/;"	v
replace	customTerminalInstaller/.shell_aliases_functions.sh	/^        replace="$1"$/;"	v
replace	macOnly/.shell_aliases_functions.sh	/^    replace="$1"$/;"	v
replacer	customTerminalInstaller/.shell_aliases_functions.sh	/^    replacer(){$/;"	f
replacer	macOnly/.shell_aliases_functions.sh	/^replacer(){$/;"	f
repo	gitRemoteRepoInformation.sh	/^            repo="$(echo $line | awk -F'\/' '{print $5}' | awk '{print $1}')"$/;"	v
res	customTerminalInstaller/.shell_aliases_functions.sh	/^            res="$2"$/;"	v
res	customTerminalInstaller/.shell_aliases_functions.sh	/^        res=600x400$/;"	v
res	macOnly/.shell_aliases_functions.sh	/^    res=600x400$/;"	v
return2	customTerminalInstaller/.shell_aliases_functions.sh	/^    return2(){$/;"	f
return2	macOnly/.shell_aliases_functions.sh	/^return2(){$/;"	f
revarr	picture_finder.sh	/^local revarr=( '|' '\/' '-' '\\')$/;"	v
revarr	secureDelete.sh	/^    local revarr=( '|' '\/' '-' '\\')$/;"	v
robot	animation	/^robot="`cat << "EOF"                               $/;"	v
rows	animation	/^rows=`tput lines`$/;"	v
s	customTerminalInstaller/.shell_aliases_functions.sh	/^        s=substr(s,1,4)$/;"	v
s	customTerminalInstaller/.shell_aliases_functions.sh	/^    s=" B   KiB MiB GiB TiB EiB PiB YiB ZiB"$/;"	v
s	macOnly/.shell_aliases_functions.sh	/^        s=substr(s,1,4)$/;"	v
s	macOnly/.shell_aliases_functions.sh	/^    s=" B   KiB MiB GiB TiB EiB PiB YiB ZiB"$/;"	v
scnew	customTerminalInstaller/.shell_aliases_functions.sh	/^scnew(){$/;"	f
scnew	macOnly/.shell_aliases_functions.sh	/^scnew(){$/;"	f
scripts_dir	duplicateLineDeleter.sh	/^scripts_dir=$SCRIPTS$/;"	v
scripts_dir	indenterAndDuplicateLineDeleter.sh	/^scripts_dir=$SCRIPTS$/;"	v
search	customTerminalInstaller/.shell_aliases_functions.sh	/^    search(){$/;"	f
search	macOnly/.shell_aliases_functions.sh	/^search(){$/;"	f
showHidden	directoryContentsSize.sh	/^showHidden(){$/;"	f
show_usage	test.pl	/^sub show_usage {$/;"	s
sorted	sortedArrayCounter.sh	/^sorted=( $(sort -f <<<"${arr[*]}") )$/;"	v
sorted	sortedArrayCounter.sh	/^sorted=($(uniq <<< "${sorted[*]}"))$/;"	v
sortedCommand	directoryContentsSize.sh	/^sortedCommand=gsort$/;"	v
sortedCommand	directoryContentsSize.sh	/^sortedCommand=sort$/;"	v
spinner	batchRename.sh	/^        spinner="$temp${spinner%"$temp"}" # and add it to the end$/;"	v
spinner	batchRename.sh	/^    local spinner="\\|\/-" # spinner$/;"	v
spinner	openAll.sh	/^	spinner=$temp${spinner%"$temp"} # and add it to the end$/;"	v
spinner	openAll.sh	/^local spinner="\\|\/-" # spinner$/;"	v
startCursor	batchRename.sh	/^startCursor(){$/;"	f
startCursor	openAll.sh	/^startCursor(){$/;"	f
startCursor	picture_finder.sh	/^startCursor(){$/;"	f
startCursor	secureDelete.sh	/^startCursor(){$/;"	f
string	openAll.sh	/^    string=""$/;"	v
suc	customTerminalInstaller/.shell_aliases_functions.sh	/^suc(){$/;"	f
suc	macOnly/.shell_aliases_functions.sh	/^suc(){$/;"	f
sum	listAllCommands.sh	/^sum=0$/;"	v
sum	sortedArrayCounter.sh	/^sum=0$/;"	v
summarizeSizes	directoryContentsSize.sh	/^summarizeSizes(){$/;"	f
tac	customTerminalInstaller/.shell_aliases_functions.sh	/^    tac(){$/;"	f
tac	macOnly/.shell_aliases_functions.sh	/^tac(){$/;"	f
tail	shebangChanger.sh	/^        tail=$(cat "$file")$/;"	v
tail	shebangChanger.sh	/^        tail=$(sed -n "$lineCounter,$"p "$file")$/;"	v
tailVersion	colorLogger.sh	/^tailVersion=tail$/;"	v
tarbellDirectory	tgzLocalInstaller.sh	/^tarbellDirectory="$1"$/;"	v
temp	batchRename.sh	/^        local temp=${spinner#?}               # remove first character from $spinner$/;"	v
temp	openAll.sh	/^	local temp=${spinner#?}               # remove first character from $spinner$/;"	v
timeToSleep	myWatchNoBlink.sh	/^    timeToSleep=$2$/;"	v
timeToSleep	myWatchNoBlink.sh	/^    timeToSleep=0.5$/;"	v
timeToSleep	myWatchNoBlinkColorized.sh	/^    timeToSleep=$2$/;"	v
timeToSleep	myWatchNoBlinkColorized.sh	/^    timeToSleep=0.5$/;"	v
title	customTerminalInstaller/.shell_aliases_functions.sh	/^    title="$1"$/;"	v
title	macOnly/.shell_aliases_functions.sh	/^    title="$1"$/;"	v
topline	animation	/^topline=0$/;"	v
total	oldCounter.sh	/^total=0$/;"	v
total	oldCounter.sh	/^total=`expr $(ls -F $1 | grep ".*[*@]" | wc -l) + $total`$/;"	v
transferFile	transfer.sh	/^transferFile="$1"$/;"	v
tutorialDir	macOnly/tutorialConfigUpdater.sh	/^tutorialDir="$HOME\/Documents\/tutorialsRepo"$/;"	v
update	customTerminalInstaller/install.sh	/^update (){$/;"	f
updatePI	updater.sh	/^updatePI(){$/;"	f
usage	directoryContentsSize.sh	/^usage(){$/;"	f
usage	duplicateLineDeleter.sh	/^usage(){$/;"	f
usage	gitgo.sh	/^usage(){$/;"	f
usage	indenterAndDuplicateLineDeleter.sh	/^usage(){$/;"	f
usage	macOnly/splitReg.sh	/^function usage ()$/;"	f
usage	macOnly/splitStdoutByRegex.sh	/^function usage ()$/;"	f
usage	myWatchNoBlink.sh	/^usage(){$/;"	f
usage	myWatchNoBlinkColorized.sh	/^usage(){$/;"	f
usage	mywatch.sh	/^usage(){$/;"	f
usage	shebangChanger.sh	/^usage(){$/;"	f
user	gitRemoteRepoInformation.sh	/^            user="$(echo $line | awk -F'\/' '{print $4}')"$/;"	v
view	eyes.sh	/^    view=${ary[$randIndex]}$/;"	v
w	updater.sh	/^    w=80$/;"	v
w	uploadWebPi.sh	/^w=80$/;"	v
watchCommand	myWatchNoBlink.sh	/^watchCommand() {$/;"	f
watchCommand	myWatchNoBlinkColorized.sh	/^watchCommand() {$/;"	f
watchingFile	watchServiceFSWatchRustCompile.sh	/^	watchingFile=`basename $2`$/;"	v
weHaveCCZE	colorLogger.sh	/^    weHaveCCZE=no$/;"	v
weHaveCCZE	colorLogger.sh	/^    weHaveCCZE=yes$/;"	v
weHaveCCZE	colorLogger.sh	/^weHaveCCZE=no$/;"	v
websiteDir	macOnly/tutorialConfigUpdater.sh	/^websiteDir="$HOME\/WebstormProjects\/PersonalWebsite"$/;"	v
width	macOnly/randomCow.sh	/^    width=$1$/;"	v
x	macOnly/combo.sh	/^    x="$(python -c 'print("trina"*5)')"$/;"	v
x	macOnly/combo.sh	/^    x=$(date | cut -c1-10)$/;"	v
x	mywatch.sh	/^    x=$(eval "$1")$/;"	v
x	test.sh	/^x=5$/;"	v
x	test.sh	/^x=50$/;"	v
xf	customTerminalInstaller/.shell_aliases_functions.sh	/^        xf=(s==" B  ")?"%5d   ":"%8.2f"$/;"	v
xf	macOnly/.shell_aliases_functions.sh	/^        xf=(s==" B  ")?"%5d   ":"%8.2f"$/;"	v
